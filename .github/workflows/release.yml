name: Build Application Release
on:
  push:
    branches: [ master ]

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  ALIAS: ${{ secrets.ALIAS }}
  PASSWORD_ALIAS: ${{ secrets.PASSWORD_ALIAS }}
  KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
  PASSWORD_KEY: ${{ secrets.PASSWORD_KEY }}
  JDK_VERSION: 11
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs=-Xmx3072m"
  BUILD_TOOLS_VERSION: "33.0.1"
  APP_NAME: "Paguei"

jobs:
  preparing_environment:
    runs-on: ubuntu-latest
    name: Preparing Environment
    outputs:
      has-exec-permissions: ${{ steps.set_permissions.outcome == 'success' }}
      jdk-version: ${{ env.JDK_VERSION }}
      android-sdk-tools: ${{ env.ANDROID_SDK_TOOLS }}
      gradle-opts: ${{ env.GRADLE_OPTS }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JDK_VERSION }}

      - name: Give execution permissions to gradlew
        run: chmod +x gradlew

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Setup Gradle
        run: echo "org.gradle.daemon=false" >> $GITHUB_WORKSPACE/gradle.properties

  unit_tests:
    needs: preparing_environment
    runs-on: ubuntu-latest
    name: Unit Tests
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Give execution permissions to gradlew
        run: chmod +x gradlew

      - name: Create google-services release file
        run: |
          rm -f app/google-services.json
          echo ${{ secrets.GOOGLE_SERVICE_JSON }} | base64 --decode > app/google-services.json

      - name: Unit tests
        run: ./gradlew testRelease --stacktrace
        env:
          HAS_EXEC_PERMISSIONS: ${{ needs.preparing_environment.outputs.has-exec-permissions }}
          JDK_VERSION: ${{ needs.preparing_environment.outputs.jdk-version }}
          ANDROID_SDK_TOOLS: ${{ needs.preparing_environment.outputs.android-sdk-tools }}
          GRADLE_OPTS: ${{ needs.preparing_environment.outputs.gradle-opts }}

  android_lint:
    needs: preparing_environment
    runs-on: ubuntu-latest
    name: Lint
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Give execution permissions to gradlew
        run: chmod +x gradlew

      - name: Create google-services release file
        run: |
          rm -f app/google-services.json
          echo ${{ secrets.GOOGLE_SERVICE_JSON }} | base64 --decode > app/google-services.json

      - if: startsWith(github.ref, 'refs/heads/master')
        name: Android Lint
        run: ./gradlew lintRelease
        env:
          HAS_EXEC_PERMISSIONS: ${{ needs.preparing_environment.outputs.has-exec-permissions }}
          JDK_VERSION: ${{ needs.preparing_environment.outputs.jdk-version }}
          ANDROID_SDK_TOOLS: ${{ needs.preparing_environment.outputs.android-sdk-tools }}
          GRADLE_OPTS: ${{ needs.preparing_environment.outputs.gradle-opts }}

  build:
    needs: [ preparing_environment, unit_tests, android_lint ]
    runs-on: ubuntu-latest
    name: Build
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Give execution permissions to gradlew
        run: |
          chmod +x gradlew

      - name: Create google-services release file
        run: |
          rm -f app/google-services.json
          echo ${{ secrets.GOOGLE_SERVICE_JSON }} | base64 --decode > app/google-services.json

      - name: Extract version from VERSION.md
        run: echo "::set-env name=version::$(cat VERSION.md)"

      - name: Get Build Date
        run: echo "::set-env name=date::$(date +%Y-%m-%d)"

      - name: Build APK
        run: ./gradlew assembleRelease

      - name: Build AAB
        run: ./gradlew bundleRelease

      - name: Give execution permissions to builds
        run: |
          find build/outputs/bundle/ -name '*.aab' -exec chmod +w {} \;
          find build/outputs/apk/ -name '*.apk' -exec chmod +w {} \;

      - name: Android Sign
        uses: Tlaster/android-sign@v1.2.2
        with:
          releaseDirectory: |
            app/build/outputs/apk/release
            app/build/outputs/bundle/release
          signingKeyBase64: ${{ env.KEYSTORE_FILE }}
          output: build/release/signed
          alias: ${{ env.ALIAS }}
          keyStorePassword: ${{ env.PASSWORD_ALIAS }}
          keyPassword: ${{ env.PASSWORD_KEY }}
        env:
          BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOLS_VERSION }}

      - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.APP_NAME }}-${{ env.version }}-${{ env.date }}-apk
          path: ${{ github.workspace}} build/release/signed/*.apk

      - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.APP_NAME }}-${{ env.version }}-${{ env.date }}-aab
          path: ${{ github.workspace}} build/release/signed/*.aab

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ env.version }}
          release_name: ${{ env.APP_NAME }} v${{ env.version }}