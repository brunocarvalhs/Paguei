name: Build Application Release
on:
  push:
    branches: [ master ]

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  JDK_VERSION: 11
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs=-Xmx3072m"
  APP_NAME: "Paguei"

jobs:
  setup_environment:
    runs-on: ubuntu-latest
    name: Setup Environment
    outputs:
      has-exec-permissions: ${{ steps.set_permissions.outcome == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '${{ env.JDK_VERSION }}'

      - name: Give execution permissions to gradlew
        id: set_permissions
        run: chmod +x gradlew

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Setup Gradle
        run: echo "org.gradle.daemon=false" >> $GITHUB_WORKSPACE/gradle.properties

  create_google_services_file:
    runs-on: ubuntu-latest
    name: Create Google Services File
    needs: setup_environment
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Create google-services release file
        run: |
          rm -f app/google-services.json
          echo ${{ secrets.GOOGLE_SERVICE_JSON }} | base64 --decode > app/google-services.json

  dependency_check:
    runs-on: ubuntu-latest
    name: Dependency Check
    needs: setup_environment
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: OWASP Dependency Check
        uses: OWASP/dependency-check-action@v2
        with:
          project: ${{ github.event.repository.name }}
          format: 'ALL'
        continue-on-error: true

  license_check:
    runs-on: ubuntu-latest
    name: License Check
    needs: setup_environment
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Install ORT
        run: |
          wget -qO - https://raw.githubusercontent.com/oss-review-toolkit/ort/main/scripts/download-repository-archive.sh | sh
          export PATH=$PWD/oss-review-toolkit:$PATH

      - name: Run ORT analyze
        run: |
          ort --info analyze -i . -o ort/analyzer

      - name: Run ORT evaluate
        run: |
          ort --info evaluate -i ort/analyzer -o ort/evaluator

  unit_tests:
    needs: [setup_environment, create_google_services_file]
    runs-on: ubuntu-latest
    name: Unit Tests
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Give execution permissions to gradlew
        run: chmod +x gradlew

      - name: Unit tests
        run: ./gradlew testRelease --stacktrace
        env:
          HAS_EXEC_PERMISSIONS: ${{ needs.setup_environment.outputs.has-exec-permissions }}
          JDK_VERSION: ${{ env.JDK_VERSION }}
          ANDROID_SDK_TOOLS: ${{ env.ANDROID_SDK_TOOLS }}
          GRADLE_OPTS: ${{ env.GRADLE_OPTS }}

  android_lint:
    needs: [setup_environment, create_google_services_file]
    runs-on: ubuntu-latest
    name: Lint
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Give execution permissions to gradlew
        run: chmod +x gradlew

      - name: Android Lint
        run: ./gradlew lintRelease
        env:
          HAS_EXEC_PERMISSIONS: ${{ needs.setup_environment.outputs.has-exec-permissions }}
          JDK_VERSION: ${{ env.JDK_VERSION }}
          ANDROID_SDK_TOOLS: ${{ env.ANDROID_SDK_TOOLS }}
          GRADLE_OPTS: ${{ env.GRADLE_OPTS }}

  extract_version_and_date:
    runs-on: ubuntu-latest
    name: Extract Version and Date
    needs: setup_environment
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      date: ${{ steps.extract_date.outputs.date }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Extract version from VERSION.md
        id: extract_version
        run: echo "::set-output name=version::$(cat VERSION.md)"

      - name: Get Build Date
        id: extract_date
        run: echo "::set-output name=date::$(date +%Y-%m-%d)"

  build_apk:
    runs-on: ubuntu-latest
    name: Build APK
    needs: [setup_environment, unit_tests, android_lint, create_google_services_file, extract_version_and_date]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Give execution permissions to gradlew
        run: chmod +x gradlew

      - name: Build APK
        run: ./gradlew assembleRelease

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.APP_NAME }}-APK-${{ needs.extract_version_and_date.outputs.version }}-${{ needs.extract_version_and_date.outputs.date }}
          path: app/build/outputs/apk/**/*.apk

  build_aab:
    runs-on: ubuntu-latest
    name: Build AAB
    needs: [setup_environment, unit_tests, android_lint, create_google_services_file, extract_version_and_date]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Give execution permissions to gradlew
        run: chmod +x gradlew

      - name: Build AAB
        run: ./gradlew bundleRelease

      - name: Upload AAB Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.APP_NAME }}-AAB-${{ needs.extract_version_and_date.outputs.version }}-${{ needs.extract_version_and_date.outputs.date }}
          path: app/build/outputs/bundle/**/*.aab

  check_existing_release:
    runs-on: ubuntu-latest
    name: Check Existing Release
    needs: extract_version_and_date
    outputs:
      release_exists: ${{ steps.check_release.outputs.exists }}
    steps:
      - name: Check if release exists
        id: check_release
        run: |
          VERSION=${{ needs.extract_version_and_date.outputs.version }}
          RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/tags/$VERSION")
          echo "$RELEASE"
          if [[ "$RELEASE" == *"\"message\": \"Not Found\""* ]]; then
            echo "::set-output name=exists::false"
          else
            echo "::set-output name=exists::true"
          fi

  create_release:
    runs-on: ubuntu-latest
    name: Create Release
    needs: [check_existing_release, build_apk, build_aab]
    if: needs.check_existing_release.outputs.release_exists == 'false'
    steps:
      - name: Download APK Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.APP_NAME }}-APK-${{ needs.extract_version_and_date.outputs.version }}-${{ needs.extract_version_and_date.outputs.date }}
          path: ./

      - name: Download AAB Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.APP_NAME }}-AAB-${{ needs.extract_version_and_date.outputs.version }}-${{ needs.extract_version_and_date.outputs.date }}
          path: ./

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.extract_version_and_date.outputs.version }}
          release_name: ${{ env.APP_NAME }} v${{ needs.extract_version_and_date.outputs.version }}
          body: |
            Release of version ${{ needs.extract_version_and_date.outputs.version }} on ${{ needs.extract_version_and_date.outputs.date }}
          draft: false
          prerelease: false

      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.APP_NAME }}-APK-${{ needs.extract_version_and_date.outputs.version }}-${{ needs.extract_version_and_date.outputs.date }}.apk
          asset_name: ${{ env.APP_NAME }}-APK-${{ needs.extract_version_and_date.outputs.version }}.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload AAB to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.APP_NAME }}-AAB-${{ needs.extract_version_and_date.outputs.version }}-${{ needs.extract_version_and_date.outputs.date }}.aab
          asset_name: ${{ env.APP_NAME }}-AAB-${{ needs.extract_version_and_date.outputs.version }}.aab
          asset_content_type: application/octet-stream
