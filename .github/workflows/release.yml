name: Build Application Release
on:
  push:
    branches: [ master ]

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  setup_environment:
    runs-on: ubuntu-latest
    name: Setup Environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load pipeline variables
        id: load_pipeline_vars
        run: |
          echo "::set-output name=enable_unit_tests::$(grep 'enable_unit_tests' .pipeline.yml | cut -d':' -f2 | sed 's/^[[:space:]]*//')"
          echo "::set-output name=enable_android_lint::$(grep 'enable_android_lint' .pipeline.yml | cut -d':' -f2 | sed 's/^[[:space:]]*//')"
          echo "::set-output name=enable_build_apk::$(grep 'enable_build_apk' .pipeline.yml | cut -d':' -f2 | sed 's/^[[:space:]]*//')"
          echo "::set-output name=enable_build_aab::$(grep 'enable_build_aab' .pipeline.yml | cut -d':' -f2 | sed 's/^[[:space:]]*//')"
          echo "::set-output name=enable_firebase_publish::$(grep 'enable_firebase_publish' .pipeline.yml | cut -d':' -f2 | sed 's/^[[:space:]]*//')"
          echo "::set-output name=jdk_version::$(grep 'jdk_version' .pipeline.yml | cut -d':' -f2 | sed 's/^[[:space:]]*//')"
          echo "::set-output name=gradle_opts::$(grep 'gradle_opts' .pipeline.yml | cut -d':' -f2 | sed 's/^[[:space:]]*//')"
          echo "::set-output name=app_name::$(grep 'app_name' .pipeline.yml | cut -d':' -f2 | sed 's/^[[:space:]]*//')"

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ steps.load_pipeline_vars.outputs.jdk_version }}

      - name: Give execution permissions to gradlew
        run: chmod +x gradlew

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Setup Gradle
        run: echo "org.gradle.daemon=false" >> $GITHUB_WORKSPACE/gradle.properties

  unit_tests:
    needs: setup_environment
    runs-on: ubuntu-latest
    if: ${{ steps.setup_environment.outputs.enable_unit_tests == 'true' }}
    name: Unit Tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Give execution permissions to gradlew
        run: chmod +x gradlew

      - name: Create google-services release file
        run: |
          rm -f app/google-services.json
          echo ${{ secrets.GOOGLE_SERVICE_JSON }} | base64 --decode > app/google-services.json

      - name: Unit tests
        run: ./gradlew testRelease --stacktrace
        env:
          JDK_VERSION: ${{ steps.load_pipeline_vars.outputs.jdk_version }}
          ANDROID_SDK_TOOLS: ${{ env.ANDROID_SDK_TOOLS }}
          GRADLE_OPTS: ${{ steps.load_pipeline_vars.outputs.gradle_opts }}

  android_lint:
    needs: setup_environment
    runs-on: ubuntu-latest
    if: ${{ steps.setup_environment.outputs.enable_android_lint == 'true' }}
    name: Lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Give execution permissions to gradlew
        run: chmod +x gradlew

      - name: Create google-services release file
        run: |
          rm -f app/google-services.json
          echo ${{ secrets.GOOGLE_SERVICE_JSON }} | base64 --decode > app/google-services.json

      - name: Android Lint
        run: ./gradlew lintRelease
        env:
          JDK_VERSION: ${{ steps.load_pipeline_vars.outputs.jdk_version }}
          ANDROID_SDK_TOOLS: ${{ env.ANDROID_SDK_TOOLS }}
          GRADLE_OPTS: ${{ steps.load_pipeline_vars.outputs.gradle_opts }}

  build_apk:
    needs: setup_environment
    runs-on: ubuntu-latest
    if: ${{ steps.setup_environment.outputs.enable_build_apk == 'true' }}
    name: Build APK
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Give execution permissions to gradlew
        run: chmod +x gradlew

      - name: Create google-services release file
        run: |
          rm -f app/google-services.json
          echo ${{ secrets.GOOGLE_SERVICE_JSON }} | base64 --decode > app/google-services.json

      - name: Build APK
        run: ./gradlew assembleRelease

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.load_pipeline_vars.outputs.app_name }}-APK
          path: app/build/outputs/apk/**/*.apk

  build_aab:
    needs: setup_environment
    runs-on: ubuntu-latest
    if: ${{ steps.setup_environment.outputs.enable_build_aab == 'true' }}
    name: Build AAB
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Give execution permissions to gradlew
        run: chmod +x gradlew

      - name: Create google-services release file
        run: |
          rm -f app/google-services.json
          echo ${{ secrets.GOOGLE_SERVICE_JSON }} | base64 --decode > app/google-services.json

      - name: Build AAB
        run: ./gradlew bundleRelease

      - name: Upload AAB Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.load_pipeline_vars.outputs.app_name }}-AAB
          path: app/build/outputs/bundle/**/*.aab

  publish_firebase:
    needs: [setup_environment, build_apk, build_aab]
    runs-on: ubuntu-latest
    if: ${{ and(steps.setup_environment.outputs.enable_firebase_publish == 'true', success() ) }}
    name: Publish to Firebase App Distribution
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create google-services release file
        run: |
          rm -f app/google-services.json
          echo ${{ secrets.GOOGLE_SERVICE_JSON }} | base64 --decode > app/google-services.json

      - name: Publish to Firebase
        run: echo "Publishing APK and AAB to Firebase App Distribution..."
