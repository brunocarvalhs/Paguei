name: Build Application
on:
  push:
    branches:
      - master
      - develop
  pull_request:
    types: [ closed, opened, synchronize, reopened ]

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
  KEYSTORE_ALIAS: ${{ secrets.KEYSTORE_ALIAS }}
  KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
  JDK_VERSION: 11
  ANDROID_SDK_TOOLS: latest
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs=-Xmx3072m"

jobs:
  preparing_environment:
    runs-on: ubuntu-latest
    name: Preparing Environment
    outputs:
      has-exec-permissions: ${{ steps.set_permissions.outcome == 'success' }}
      jdk-version: ${{ env.JDK_VERSION }}
      android-sdk-tools: ${{ env.ANDROID_SDK_TOOLS }}
      gradle-opts: ${{ env.GRADLE_OPTS }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ env.JDK_VERSION }}

      - name: Give execution permissions to gradlew
        run: chmod +x gradlew

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
        with:
          android-sdk-tools: ${{ env.ANDROID_SDK_TOOLS }}

      - name: Setup Gradle
        run: |
          mkdir ~/.gradle
          echo "org.gradle.daemon=false" >> ~/.gradle/gradle.properties
          echo "org.gradle.jvmargs=-Xmx3072m" >> ~/.gradle/gradle.properties

      - name: Extract version from VERSION.md
        run: echo "::set-env name=version::$(cat VERSION.md)"

      - name: Get Build Date
        run: echo "::set-env name=date::$(date +%Y-%m-%d)"

  unit_tests:
    needs: preparing_environment
    runs-on: ubuntu-latest
    name: Unit Tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          path: .

      - name: Give execution permissions to gradlew
        if: needs.preparing_environment.outputs.has-exec-permissions == 'false'
        run: chmod +x gradlew

      - name: Run unit tests
        run: ./gradlew test
        env:
          HAS_EXEC_PERMISSIONS: ${{ needs.preparing_environment.outputs.has-exec-permissions }}
          JDK_VERSION: ${{ needs.preparing_environment.outputs.jdk-version }}
          ANDROID_SDK_TOOLS: ${{ needs.preparing_environment.outputs.android-sdk-tools }}
          GRADLE_OPTS: ${{ needs.preparing_environment.outputs.gradle-opts }}

  android_lint:
    needs: preparing_environment
    runs-on: ubuntu-latest
    name: Lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          path: .

      - name: Give execution permissions to gradlew
        if: needs.preparing_environment.outputs.has-exec-permissions == 'false'
        run: chmod +x gradlew

      - name: Android Lint
        run: ./gradlew lintDebug
        env:
          HAS_EXEC_PERMISSIONS: ${{ needs.preparing_environment.outputs.has-exec-permissions }}
          JDK_VERSION: ${{ needs.preparing_environment.outputs.jdk-version }}
          ANDROID_SDK_TOOLS: ${{ needs.preparing_environment.outputs.android-sdk-tools }}
          GRADLE_OPTS: ${{ needs.preparing_environment.outputs.gradle-opts }}

  build:
    needs: [ unit_tests, android_lint ]
    runs-on: ubuntu-latest
    name: Build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          path: .

      - name: Create google-services release file
        if: startsWith(github.ref, 'refs/heads/master')
        run: |
          rm -f app/google-services.json
          echo ${{ secrets.GOOGLE_SERVICE_JSON }} | base64 --decode > app/google-services.json

      - name: Give execution permissions to gradlew
        if: needs.preparing_environment.outputs.has-exec-permissions == 'false'
        run: chmod +x gradlew

      - name: Build Application Debug
        if: startsWith(github.ref, 'refs/heads/develop')
        run: ./gradlew assembleDebug
        env:
          VERSION: ${{ needs.preparing_environment.outputs.version }}

      - name: Build Application Release
        if: startsWith(github.ref, 'refs/heads/master')
        uses: gradle-actions/android@v1
        with:
          gradle-version: '7.3'
          arguments: bundleRelease
          project-dir: .
          java-version: ${{ needs.preparing_environment.outputs.jdk-version }}
          env: |
            KEYSTORE_PASSWORD=$KEYSTORE_PASSWORD
            KEYSTORE_ALIAS=$KEYSTORE_ALIAS
            KEY_PASSWORD=$KEY_PASSWORD
            VERSION=${{ needs.preparing_environment.outputs.version }}
  upload:
    needs: [ build ]
    name: Upload the signed artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          path: .

      - name: Upload AAB
        if: startsWith(github.ref, 'refs/heads/master')
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.repository }}-${{ needs.preparing_environment.outputs.version }}-${{ needs.preparing_environment.outputs.date }}
          path: app/build/outputs/bundle/

      - name: Upload APK
        if: startsWith(github.ref, 'refs/heads/develop')
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.repository }}-${{ needs.preparing_environment.outputs.version }}-${{ needs.preparing_environment.outputs.date }}
          path: app/build/outputs/apk/

  git:
    needs: [ build ]
    name: Create branch release or tags
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          key: ${{ github.sha }}
          working-directory: .

      - name: Create Branch Release
        if: startsWith(github.ref, 'refs/heads/develop')
        uses: peterjgrainger/action-create-branch@v2.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          branch: release/v${{ env.version }}
          sha: '${{ github.event.pull_request.head.sha }}'